sshpw --username=root --plaintext centos
# Firewall configuration
firewall --disabled
selinux --enforcing

# Use network installation
url --url="http://mirror.centos.org/centos/7/os/x86_64/"
network --bootproto=dhcp --device=eth0 --activate --onboot=on
network --bootproto=dhcp --device=eth1 --activate --onboot=on
skipx
rootpw --plaintext centos
auth --useshadow --passalgo=sha512

timezone --utc America/New_York
bootloader --location=mbr --append="no_timer_check console=ttyS0 console=tty0 net.ifnames=0 biosdevname=0"
clearpart --all
part /boot --size=300 --fstype="xfs"
part pv.01 --grow
volgroup minishift pv.01
logvol / --size=3000 --fstype="xfs" --name=root --vgname=minishift

#Repos
repo --name=base --baseurl=http://mirror.centos.org/centos/7/os/x86_64/
repo --name=updates --baseurl=http://mirror.centos.org/centos/7/updates/x86_64/
repo --name=extras --baseurl=http://mirror.centos.org/centos/7/extras/x86_64/

shutdown

%packages  --excludedocs --instLangs=en
@core
openssl
bash
centos-logos
docker
dracut
e4fsprogs
efibootmgr
grub2
grub2-efi
kernel
net-tools
parted
shadow-utils
shim
syslinux
hyperv-daemons

#Packages to be removed
-aic94xx-firmware
-alsa-firmware
-iprutils
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-iwl7265-firmware
-postfix
-rsyslog
%end

%post

# Setting a global Locale for the server
echo "LANG=\"C\"" > /etc/locale.conf

# Add docker user with 'tcuser' password
/usr/sbin/useradd -p '$1$AhiE7wa5$d8puTTTSvN7Hq3JgUvfLV/' docker
/usr/sbin/usermod -a -G docker docker

# sudo permission for docker user
echo "%docker ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/docker
sed -i "s/^.*requiretty/#Defaults requiretty/" /etc/sudoers

# Place holder for base64 encrypt handle-user-data script
cat > handle-user-data.base64 << EOF
${handle_user_data}
EOF

# minishift as variant for custom provisioner
echo "VARIANT=\"minishift\"" >> /etc/os-release
echo "VARIANT_VERSION=\"${version}\"" >> /etc/os-release
echo "BUILD_ID=\"${build_id}\"" >> /etc/os-release

base64 -d < handle-user-data.base64 > handle-user-data
mv handle-user-data /etc/rc.d/init.d/

chmod +x /etc/rc.d/init.d/handle-user-data
/sbin/restorecon /etc/rc.d/init.d/handle-user-data

chmod +x /etc/rc.d/rc.local
echo "/etc/rc.d/init.d/handle-user-data" >> /etc/rc.d/rc.local

# Remove redhat-logo and firmware package to help with reduce box size
yum remove -y redhat-logos linux-firmware

# Clear yum package and metadata cache
yum clean all

# Place holder cert generation script. This is needed to create certs when system
# boots first time to make sure docker daemon running with cert enabled. On restart
# this script will first check cert is already available or not.
cat > cert-gen.sh.base64 << EOF
${cert_gen}
EOF

base64 -d < cert-gen.sh.base64 > cert-gen.sh
chmod +x cert-gen.sh
mv cert-gen.sh /opt

# Workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1414250
ln -s /usr/bin/dockerd-current /usr/bin/dockerd

# This unit file will take precedence over unit file which present /usr location
# and it have daemon running using cert so when restart happen then also docker
# daemon works as expected.
cat << EOF > /etc/systemd/system/docker.service
[Unit]
Description=Docker Application Container Engine
After=network.target rc-local.service

[Service]
Type=notify
ExecStartPre=/opt/cert-gen.sh
ExecStart=/usr/bin/docker daemon -H tcp://0.0.0.0:2376 \
                       -H unix:///var/run/docker.sock \
                       --selinux-enabled \
                       --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \
                       --default-runtime=docker-runc \
                       --storage-driver devicemapper \
                       --tlsverify --tlscacert /etc/docker/ca.pem \
                       --tlscert /etc/docker/server.pem \
                       --tlskey /etc/docker/server-key.pem
ExecReload=/bin/kill -s HUP
MountFlags=slave
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
TimeoutStartSec=0
Delegate=yes
KillMode=process
Environment=

[Install]
WantedBy=multi-user.target
EOF

systemctl enable docker

rm -rf /usr/lib/locale/locale-archive
rm -rf /var/cache/yum/*

%end
